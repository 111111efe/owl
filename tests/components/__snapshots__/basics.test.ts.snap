// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`basics Multi root component 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BHtml, BMulti, BNode, BText} = Blocks;
  let {elem, toString, withDefault, call, zero, scope, getValues, owner, callSlot} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<span>1</span>\`);
  }
  
  class Block2 extends BNode {
    static el = elem(\`<span>2</span>\`);
  }
  
  return ctx => {
    const b1 = new BMulti(3);
    const b2 = b1.children[0] = new Block1();
    b1.children[1] = new BText(\`text\`);
    const b3 = b1.children[2] = new Block2();
    return b1;
  }
}"
`;

exports[`basics a class component inside a class component 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BHtml, BMulti, BNode, BText} = Blocks;
  let {elem, toString, withDefault, call, zero, scope, getValues, owner, callSlot} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<span><owl-anchor/></span>\`);
    children = new Array(1);
  }
  
  return ctx => {
    const b1 = new Block1();
    b1.children[0] = new BComponent(ctx, \`Child\`, {});
    return b1;
  }
}"
`;

exports[`basics a class component inside a class component, no external dom 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BHtml, BMulti, BNode, BText} = Blocks;
  let {elem, toString, withDefault, call, zero, scope, getValues, owner, callSlot} = utils;
  
  return ctx => {
    const b1 = new BComponent(ctx, \`Child\`, {});
    return b1;
  }
}"
`;

exports[`basics can handle empty props 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BHtml, BMulti, BNode, BText} = Blocks;
  let {elem, toString, withDefault, call, zero, scope, getValues, owner, callSlot} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><owl-anchor/></div>\`);
    children = new Array(1);
  }
  
  return ctx => {
    const b1 = new Block1();
    b1.children[0] = new BComponent(ctx, \`Child\`, {val: undefined});
    return b1;
  }
}"
`;

exports[`basics can mount a simple class component 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BHtml, BMulti, BNode, BText} = Blocks;
  let {elem, toString, withDefault, call, zero, scope, getValues, owner, callSlot} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<span>simple vnode</span>\`);
  }
  
  return ctx => {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`basics cannot be clicked on and updated if not in DOM 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BHtml, BMulti, BNode, BText} = Blocks;
  let {elem, toString, withDefault, call, zero, scope, getValues, owner, callSlot} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><owl-text/><button>Inc</button></div>\`);
    data = new Array(1);
    handlers = new Array(1);
    update() {
      this.el.firstChild.textContent = toString(this.data[0]);
    }
    build() {
      super.build();
      this.setupHandler(this.el.firstChild.nextSibling, 0);
    }
  }
  
  return ctx => {
    ctx = Object.create(ctx);
    ctx[scope] = 1;
    const b1 = new Block1();
    b1.data[0] = ctx['state'].counter;
    const v2 = ctx['state'];
    b1.handlers[0] = [\`click\`, (e) => v2.counter++, ctx];
    return b1;
  }
}"
`;

exports[`basics class component with dynamic text 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BHtml, BMulti, BNode, BText} = Blocks;
  let {elem, toString, withDefault, call, zero, scope, getValues, owner, callSlot} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<span>My value: <owl-text/></span>\`);
    data = new Array(1);
    update() {
      this.el.firstChild.nextSibling.textContent = toString(this.data[0]);
    }
  }
  
  return ctx => {
    const b1 = new Block1();
    b1.data[0] = ctx['value'];
    return b1;
  }
}"
`;

exports[`basics class parent, class child component with props 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BHtml, BMulti, BNode, BText} = Blocks;
  let {elem, toString, withDefault, call, zero, scope, getValues, owner, callSlot} = utils;
  
  return ctx => {
    const b1 = new BComponent(ctx, \`Child\`, {value: 42});
    return b1;
  }
}"
`;

exports[`basics class parent, class child component with props 2`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BHtml, BMulti, BNode, BText} = Blocks;
  let {elem, toString, withDefault, call, zero, scope, getValues, owner, callSlot} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><owl-text/></div>\`);
    data = new Array(1);
    update() {
      this.el.firstChild.textContent = toString(this.data[0]);
    }
  }
  
  return ctx => {
    const b1 = new Block1();
    b1.data[0] = ctx['props'].value;
    return b1;
  }
}"
`;

exports[`basics parent, child and grandchild 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BHtml, BMulti, BNode, BText} = Blocks;
  let {elem, toString, withDefault, call, zero, scope, getValues, owner, callSlot} = utils;
  
  return ctx => {
    const b1 = new BComponent(ctx, \`Child\`, {});
    return b1;
  }
}"
`;

exports[`basics two child components 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BHtml, BMulti, BNode, BText} = Blocks;
  let {elem, toString, withDefault, call, zero, scope, getValues, owner, callSlot} = utils;
  
  return ctx => {
    const b1 = new BMulti(2);
    b1.children[0] = new BComponent(ctx, \`Child\`, {});
    b1.children[1] = new BComponent(ctx, \`Child\`, {});
    return b1;
  }
}"
`;

exports[`basics zero or one child components 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BHtml, BMulti, BNode, BText} = Blocks;
  let {elem, toString, withDefault, call, zero, scope, getValues, owner, callSlot} = utils;
  
  return ctx => {
    const b1 = new BMulti(1);
    if (ctx['state'].hasChild) {
      b1.children[0] = new BComponent(ctx, \`Child\`, {});
    }
    return b1;
  }
}"
`;
