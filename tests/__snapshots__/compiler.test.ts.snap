// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`template compiler a t-if next to a div 1`] = `
"function anonymous(ContentBlock, MultiBlock, elem
) {
  class Block1 extends ContentBlock {
    static el = elem(\`<div>foo</div>\`);
  }
  class Block2 extends ContentBlock {
    static el = elem(\`1\`);
  }
  
  return ctx => {
    const b1 = new MultiBlock(2);
    const b2 = b1.children[0] = new Block1();
    if (ctx['cond']) {
      const b3 = b1.children[1] = new Block2();
    }
    return b1;
  }
}"
`;

exports[`template compiler a t-if with two inner nodes 1`] = `
"function anonymous(ContentBlock, MultiBlock, elem
) {
  class Block1 extends ContentBlock {
    static el = elem(\`<span>yip</span>\`);
  }
  class Block2 extends ContentBlock {
    static el = elem(\`<div>yip</div>\`);
  }
  
  return ctx => {
    const b1 = new MultiBlock(1);
    if (ctx['condition']) {
      const b2 = b1.children[0] = new MultiBlock(2);
      const b3 = b2.children[0] = new Block1();
      const b4 = b2.children[1] = new Block2();
    }
    return b1;
  }
}"
`;

exports[`template compiler div containing a t-if with two inner nodes 1`] = `
"function anonymous(ContentBlock, MultiBlock, elem
) {
  class Block1 extends ContentBlock {
    static el = elem(\`<div><owl-anchor></owl-anchor></div>\`);
    children = new Array(1);
  }
  class Block2 extends ContentBlock {
    static el = elem(\`<span>yip</span>\`);
  }
  class Block3 extends ContentBlock {
    static el = elem(\`<div>yip</div>\`);
  }
  
  return ctx => {
    const b1 = new Block1();
    if (ctx['condition']) {
      const b2 = b1.children[0] = new MultiBlock(2);
      const b3 = b2.children[0] = new Block2();
      const b4 = b2.children[1] = new Block3();
    }
    return b1;
  }
}"
`;

exports[`template compiler div with a class attribute 1`] = `
"function anonymous(ContentBlock, MultiBlock, elem
) {
  class Block1 extends ContentBlock {
    static el = elem(\`<div class=\\"abc\\">foo</div>\`);
  }
  
  return ctx => {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`template compiler div with a class attribute with a quote 1`] = `
"function anonymous(ContentBlock, MultiBlock, elem
) {
  class Block1 extends ContentBlock {
    static el = elem(\`<div class=\\"a'bc\\">word</div>\`);
  }
  
  return ctx => {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`template compiler div with a span child node 1`] = `
"function anonymous(ContentBlock, MultiBlock, elem
) {
  class Block1 extends ContentBlock {
    static el = elem(\`<div><span>word</span></div>\`);
  }
  
  return ctx => {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`template compiler div with an arbitrary attribute with a quote 1`] = `
"function anonymous(ContentBlock, MultiBlock, elem
) {
  class Block1 extends ContentBlock {
    static el = elem(\`<div abc=\\"a'bc\\">word</div>\`);
  }
  
  return ctx => {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`template compiler div with an empty class attribute 1`] = `
"function anonymous(ContentBlock, MultiBlock, elem
) {
  class Block1 extends ContentBlock {
    static el = elem(\`<div>word</div>\`);
  }
  
  return ctx => {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`template compiler div with content 1`] = `
"function anonymous(ContentBlock, MultiBlock, elem
) {
  class Block1 extends ContentBlock {
    static el = elem(\`<div>foo</div>\`);
  }
  
  return ctx => {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`template compiler dom node with t-esc 1`] = `
"function anonymous(ContentBlock, MultiBlock, elem
) {
  class Block1 extends ContentBlock {
    static el = elem(\`<div><owl-text></owl-text></div>\`);
    texts = new Array(1);
    update() {
      this.el.firstChild.textContent = this.texts[0];
    }
  }
  
  return ctx => {
    const b1 = new Block1();
    b1.texts[0] = ctx['text'];
    return b1;
  }
}"
`;

exports[`template compiler dynamic content after t-if with two children nodes 1`] = `
"function anonymous(ContentBlock, MultiBlock, elem
) {
  class Block1 extends ContentBlock {
    static el = elem(\`<div><owl-anchor></owl-anchor><owl-text></owl-text></div>\`);
    children = new Array(1);
    texts = new Array(1);
    update() {
      this.anchors[0].nextSibling.textContent = this.texts[0];
    }
  }
  class Block2 extends ContentBlock {
    static el = elem(\`<p>1</p>\`);
  }
  class Block3 extends ContentBlock {
    static el = elem(\`<p>2</p>\`);
  }
  
  return ctx => {
    const b1 = new Block1();
    if (ctx['condition']) {
      const b2 = b1.children[0] = new MultiBlock(2);
      const b3 = b2.children[0] = new Block2();
      const b4 = b2.children[1] = new Block3();
    }
    b1.texts[0] = ctx['text'];
    return b1;
  }
}"
`;

exports[`template compiler dynamic text value 1`] = `
"function anonymous(ContentBlock, MultiBlock, elem
) {
  class Block1 extends ContentBlock {
    static el = elem(\`<owl-text></owl-text>\`);
    texts = new Array(1);
    update() {
      this.el.textContent = this.texts[0];
    }
  }
  
  return ctx => {
    const b1 = new Block1();
    b1.texts[0] = ctx['text'];
    return b1;
  }
}"
`;

exports[`template compiler empty div 1`] = `
"function anonymous(ContentBlock, MultiBlock, elem
) {
  class Block1 extends ContentBlock {
    static el = elem(\`<div></div>\`);
  }
  
  return ctx => {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`template compiler empty string 1`] = `
"function anonymous(ContentBlock, MultiBlock, elem
) {
  class Block1 extends ContentBlock {
    static el = elem(\`\`);
  }
  
  return ctx => {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`template compiler just a t-if 1`] = `
"function anonymous(ContentBlock, MultiBlock, elem
) {
  class Block1 extends ContentBlock {
    static el = elem(\`ok\`);
  }
  
  return ctx => {
    const b1 = new MultiBlock(1);
    if (ctx['condition']) {
      const b2 = b1.children[0] = new Block1();
    }
    return b1;
  }
}"
`;

exports[`template compiler multiple root nodes 1`] = `
"function anonymous(ContentBlock, MultiBlock, elem
) {
  class Block1 extends ContentBlock {
    static el = elem(\`<div>foo</div>\`);
  }
  class Block2 extends ContentBlock {
    static el = elem(\`<span>hey</span>\`);
  }
  
  return ctx => {
    const b1 = new MultiBlock(2);
    const b2 = b1.children[0] = new Block1();
    const b3 = b1.children[1] = new Block2();
    return b1;
  }
}"
`;

exports[`template compiler properly handle comments 1`] = `
"function anonymous(ContentBlock, MultiBlock, elem
) {
  class Block1 extends ContentBlock {
    static el = elem(\`<div>hello <!-- comment-->owl</div>\`);
  }
  
  return ctx => {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`template compiler simple string 1`] = `
"function anonymous(ContentBlock, MultiBlock, elem
) {
  class Block1 extends ContentBlock {
    static el = elem(\`hello vdom\`);
  }
  
  return ctx => {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`template compiler simple string in t tag 1`] = `
"function anonymous(ContentBlock, MultiBlock, elem
) {
  class Block1 extends ContentBlock {
    static el = elem(\`hello vdom\`);
  }
  
  return ctx => {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`template compiler simple t-if/t-else 1`] = `
"function anonymous(ContentBlock, MultiBlock, elem
) {
  class Block1 extends ContentBlock {
    static el = elem(\`1\`);
  }
  class Block2 extends ContentBlock {
    static el = elem(\`2\`);
  }
  
  return ctx => {
    const b1 = new MultiBlock(1);
    if (ctx['condition']) {
      const b2 = b1.children[0] = new Block1();
    } else {
      const b3 = b1.children[1] = new Block2();
    }
    return b1;
  }
}"
`;

exports[`template compiler simple t-if/t-else in a div 1`] = `
"function anonymous(ContentBlock, MultiBlock, elem
) {
  class Block1 extends ContentBlock {
    static el = elem(\`<div><owl-anchor></owl-anchor><owl-anchor></owl-anchor></div>\`);
    children = new Array(2);
  }
  class Block2 extends ContentBlock {
    static el = elem(\`1\`);
  }
  class Block3 extends ContentBlock {
    static el = elem(\`2\`);
  }
  
  return ctx => {
    const b1 = new Block1();
    if (ctx['condition']) {
      const b2 = b1.children[0] = new Block2();
    } else {
      const b3 = b1.children[1] = new Block3();
    }
    return b1;
  }
}"
`;

exports[`template compiler static text and dynamic text (no t tag) 1`] = `
"function anonymous(ContentBlock, MultiBlock, elem
) {
  class Block1 extends ContentBlock {
    static el = elem(\`hello \`);
  }
  class Block2 extends ContentBlock {
    static el = elem(\`<owl-text></owl-text>\`);
    texts = new Array(1);
    update() {
      this.el.textContent = this.texts[0];
    }
  }
  
  return ctx => {
    const b1 = new MultiBlock(2);
    const b2 = b1.children[0] = new Block1();
    const b3 = b1.children[1] = new Block2();
    b3.texts[0] = ctx['text'];
    return b1;
  }
}"
`;

exports[`template compiler static text and dynamic text 1`] = `
"function anonymous(ContentBlock, MultiBlock, elem
) {
  class Block1 extends ContentBlock {
    static el = elem(\`hello \`);
  }
  class Block2 extends ContentBlock {
    static el = elem(\`<owl-text></owl-text>\`);
    texts = new Array(1);
    update() {
      this.el.textContent = this.texts[0];
    }
  }
  
  return ctx => {
    const b1 = new MultiBlock(2);
    const b2 = b1.children[0] = new Block1();
    const b3 = b1.children[1] = new Block2();
    b3.texts[0] = ctx['text'];
    return b1;
  }
}"
`;

exports[`template compiler t-esc in dom node 1`] = `
"function anonymous(ContentBlock, MultiBlock, elem
) {
  class Block1 extends ContentBlock {
    static el = elem(\`<div><owl-text></owl-text></div>\`);
    texts = new Array(1);
    update() {
      this.el.firstChild.textContent = this.texts[0];
    }
  }
  
  return ctx => {
    const b1 = new Block1();
    b1.texts[0] = ctx['text'];
    return b1;
  }
}"
`;

exports[`template compiler t-esc in dom node, variations 1`] = `
"function anonymous(ContentBlock, MultiBlock, elem
) {
  class Block1 extends ContentBlock {
    static el = elem(\`<div>hello <owl-text></owl-text></div>\`);
    texts = new Array(1);
    update() {
      this.el.firstChild.nextSibling.textContent = this.texts[0];
    }
  }
  
  return ctx => {
    const b1 = new Block1();
    b1.texts[0] = ctx['text'];
    return b1;
  }
}"
`;

exports[`template compiler t-esc in dom node, variations 2`] = `
"function anonymous(ContentBlock, MultiBlock, elem
) {
  class Block1 extends ContentBlock {
    static el = elem(\`<div>hello <owl-text></owl-text> world</div>\`);
    texts = new Array(1);
    update() {
      this.el.firstChild.nextSibling.textContent = this.texts[0];
    }
  }
  
  return ctx => {
    const b1 = new Block1();
    b1.texts[0] = ctx['text'];
    return b1;
  }
}"
`;

exports[`template compiler t-if and t-else with two nodes 1`] = `
"function anonymous(ContentBlock, MultiBlock, elem
) {
  class Block1 extends ContentBlock {
    static el = elem(\`1\`);
  }
  class Block2 extends ContentBlock {
    static el = elem(\`<span>a</span>\`);
  }
  class Block3 extends ContentBlock {
    static el = elem(\`<span>b</span>\`);
  }
  
  return ctx => {
    const b1 = new MultiBlock(1);
    if (ctx['condition']) {
      const b2 = b1.children[0] = new Block1();
    } else {
      const b3 = b1.children[1] = new MultiBlock(2);
      const b4 = b3.children[0] = new Block2();
      const b5 = b3.children[1] = new Block3();
    }
    return b1;
  }
}"
`;

exports[`template compiler t-if in a div 1`] = `
"function anonymous(ContentBlock, MultiBlock, elem
) {
  class Block1 extends ContentBlock {
    static el = elem(\`<div><owl-anchor></owl-anchor></div>\`);
    children = new Array(1);
  }
  class Block2 extends ContentBlock {
    static el = elem(\`ok\`);
  }
  
  return ctx => {
    const b1 = new Block1();
    if (ctx['condition']) {
      const b2 = b1.children[0] = new Block2();
    }
    return b1;
  }
}"
`;

exports[`template compiler two consecutive t-if 1`] = `
"function anonymous(ContentBlock, MultiBlock, elem
) {
  class Block1 extends ContentBlock {
    static el = elem(\`1\`);
  }
  class Block2 extends ContentBlock {
    static el = elem(\`2\`);
  }
  
  return ctx => {
    const b1 = new MultiBlock(2);
    if (ctx['cond1']) {
      const b2 = b1.children[0] = new Block1();
    }
    if (ctx['cond2']) {
      const b3 = b1.children[1] = new Block2();
    }
    return b1;
  }
}"
`;

exports[`template compiler two consecutive t-if in a div 1`] = `
"function anonymous(ContentBlock, MultiBlock, elem
) {
  class Block1 extends ContentBlock {
    static el = elem(\`<div><owl-anchor></owl-anchor><owl-anchor></owl-anchor></div>\`);
    children = new Array(2);
  }
  class Block2 extends ContentBlock {
    static el = elem(\`1\`);
  }
  class Block3 extends ContentBlock {
    static el = elem(\`2\`);
  }
  
  return ctx => {
    const b1 = new Block1();
    if (ctx['cond1']) {
      const b2 = b1.children[0] = new Block2();
    }
    if (ctx['cond2']) {
      const b3 = b1.children[1] = new Block3();
    }
    return b1;
  }
}"
`;

exports[`template compiler two t-escs next to each other 1`] = `
"function anonymous(ContentBlock, MultiBlock, elem
) {
  class Block1 extends ContentBlock {
    static el = elem(\`<owl-text></owl-text>\`);
    texts = new Array(1);
    update() {
      this.el.textContent = this.texts[0];
    }
  }
  class Block2 extends ContentBlock {
    static el = elem(\`<owl-text></owl-text>\`);
    texts = new Array(1);
    update() {
      this.el.textContent = this.texts[0];
    }
  }
  
  return ctx => {
    const b1 = new MultiBlock(2);
    const b2 = b1.children[0] = new Block1();
    b2.texts[0] = ctx['text1'];
    const b3 = b1.children[1] = new Block2();
    b3.texts[0] = ctx['text2'];
    return b1;
  }
}"
`;

exports[`template compiler two t-escs next to each other, in a div 1`] = `
"function anonymous(ContentBlock, MultiBlock, elem
) {
  class Block1 extends ContentBlock {
    static el = elem(\`<div><owl-text></owl-text><owl-text></owl-text></div>\`);
    texts = new Array(2);
    update() {
      this.el.firstChild.textContent = this.texts[0];
      this.el.firstChild.nextSibling.textContent = this.texts[1];
    }
  }
  
  return ctx => {
    const b1 = new Block1();
    b1.texts[0] = ctx['text1'];
    b1.texts[1] = ctx['text2'];
    return b1;
  }
}"
`;
