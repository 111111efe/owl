// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`comments properly handle comments 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div>hello <!-- comment-->owl</div>\`);
  }
  
  return ctx => {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`comments properly handle comments between t-if/t-else 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div><owl-anchor></owl-anchor><owl-anchor></owl-anchor></div>\`);
    children = new Array(2);
  }
  class Block2 extends ContentBlock {
    static el = elem(\`<span>true</span>\`);
  }
  class Block3 extends ContentBlock {
    static el = elem(\`<span t-else=\\"\\">owl</span>\`);
  }
  
  return ctx => {
    const b1 = new Block1();
    if (true) {
      const b2 = b1.children[0] = new Block2();
    } else {
      const b3 = b1.children[1] = new Block3();
    }
    return b1;
  }
}"
`;

exports[`simple templates, mostly static div with a class attribute 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div class=\\"abc\\">foo</div>\`);
  }
  
  return ctx => {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`simple templates, mostly static div with a class attribute with a quote 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div class=\\"a'bc\\">word</div>\`);
  }
  
  return ctx => {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`simple templates, mostly static div with a span child node 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div><span>word</span></div>\`);
  }
  
  return ctx => {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`simple templates, mostly static div with an arbitrary attribute with a quote 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div abc=\\"a'bc\\">word</div>\`);
  }
  
  return ctx => {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`simple templates, mostly static div with an empty class attribute 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div>word</div>\`);
  }
  
  return ctx => {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`simple templates, mostly static div with content 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div>foo</div>\`);
  }
  
  return ctx => {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`simple templates, mostly static dom node with t-esc 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div><owl-text></owl-text></div>\`);
    texts = new Array(1);
    update() {
      this.el.firstChild.textContent = toString(this.texts[0]);
    }
  }
  
  return ctx => {
    const b1 = new Block1();
    b1.texts[0] = ctx['text'];
    return b1;
  }
}"
`;

exports[`simple templates, mostly static dynamic text value 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<owl-text></owl-text>\`);
    texts = new Array(1);
    update() {
      this.el.textContent = toString(this.texts[0]);
    }
  }
  
  return ctx => {
    const b1 = new Block1();
    b1.texts[0] = ctx['text'];
    return b1;
  }
}"
`;

exports[`simple templates, mostly static empty div 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div></div>\`);
  }
  
  return ctx => {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`simple templates, mostly static empty string 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`\`);
  }
  
  return ctx => {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`simple templates, mostly static multiple root nodes 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div>foo</div>\`);
  }
  class Block2 extends ContentBlock {
    static el = elem(\`<span>hey</span>\`);
  }
  
  return ctx => {
    const b1 = new MultiBlock(2);
    const b2 = b1.children[0] = new Block1();
    const b3 = b1.children[1] = new Block2();
    return b1;
  }
}"
`;

exports[`simple templates, mostly static simple string 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`hello vdom\`);
  }
  
  return ctx => {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`simple templates, mostly static simple string in t tag 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`hello vdom\`);
  }
  
  return ctx => {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`simple templates, mostly static static text and dynamic text (no t tag) 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`hello \`);
  }
  class Block2 extends ContentBlock {
    static el = elem(\`<owl-text></owl-text>\`);
    texts = new Array(1);
    update() {
      this.el.textContent = toString(this.texts[0]);
    }
  }
  
  return ctx => {
    const b1 = new MultiBlock(2);
    const b2 = b1.children[0] = new Block1();
    const b3 = b1.children[1] = new Block2();
    b3.texts[0] = ctx['text'];
    return b1;
  }
}"
`;

exports[`simple templates, mostly static static text and dynamic text 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`hello \`);
  }
  class Block2 extends ContentBlock {
    static el = elem(\`<owl-text></owl-text>\`);
    texts = new Array(1);
    update() {
      this.el.textContent = toString(this.texts[0]);
    }
  }
  
  return ctx => {
    const b1 = new MultiBlock(2);
    const b2 = b1.children[0] = new Block1();
    const b3 = b1.children[1] = new Block2();
    b3.texts[0] = ctx['text'];
    return b1;
  }
}"
`;

exports[`simple templates, mostly static t-esc in dom node 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div><owl-text></owl-text></div>\`);
    texts = new Array(1);
    update() {
      this.el.firstChild.textContent = toString(this.texts[0]);
    }
  }
  
  return ctx => {
    const b1 = new Block1();
    b1.texts[0] = ctx['text'];
    return b1;
  }
}"
`;

exports[`simple templates, mostly static t-esc in dom node, variations 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div>hello <owl-text></owl-text></div>\`);
    texts = new Array(1);
    update() {
      this.el.firstChild.nextSibling.textContent = toString(this.texts[0]);
    }
  }
  
  return ctx => {
    const b1 = new Block1();
    b1.texts[0] = ctx['text'];
    return b1;
  }
}"
`;

exports[`simple templates, mostly static t-esc in dom node, variations 2`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div>hello <owl-text></owl-text> world</div>\`);
    texts = new Array(1);
    update() {
      this.el.firstChild.nextSibling.textContent = toString(this.texts[0]);
    }
  }
  
  return ctx => {
    const b1 = new Block1();
    b1.texts[0] = ctx['text'];
    return b1;
  }
}"
`;

exports[`simple templates, mostly static two t-escs next to each other 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<owl-text></owl-text>\`);
    texts = new Array(1);
    update() {
      this.el.textContent = toString(this.texts[0]);
    }
  }
  class Block2 extends ContentBlock {
    static el = elem(\`<owl-text></owl-text>\`);
    texts = new Array(1);
    update() {
      this.el.textContent = toString(this.texts[0]);
    }
  }
  
  return ctx => {
    const b1 = new MultiBlock(2);
    const b2 = b1.children[0] = new Block1();
    b2.texts[0] = ctx['text1'];
    const b3 = b1.children[1] = new Block2();
    b3.texts[0] = ctx['text2'];
    return b1;
  }
}"
`;

exports[`simple templates, mostly static two t-escs next to each other, in a div 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div><owl-text></owl-text><owl-text></owl-text></div>\`);
    texts = new Array(2);
    update() {
      this.el.firstChild.textContent = toString(this.texts[0]);
      this.el.firstChild.nextSibling.textContent = toString(this.texts[1]);
    }
  }
  
  return ctx => {
    const b1 = new Block1();
    b1.texts[0] = ctx['text1'];
    b1.texts[1] = ctx['text2'];
    return b1;
  }
}"
`;

exports[`t-call (template calling) basic caller 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div><owl-anchor></owl-anchor></div>\`);
    children = new Array(1);
  }
  
  return ctx => {
    const b1 = new Block1();
    b1.children[0] = call(\`_basic-callee\`, ctx);
    return b1;
  }
}"
`;

exports[`t-call (template calling) basic caller, no parent node 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  
  return ctx => {
    const b1 = new MultiBlock(1);
    b1.children[0] = call(\`_basic-callee\`, ctx);
    return b1;
  }
}"
`;

exports[`t-call (template calling) t-call with t-if 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div><owl-anchor></owl-anchor><owl-anchor></owl-anchor></div>\`);
    children = new Array(2);
  }
  
  return ctx => {
    const b1 = new Block1();
    if (ctx['flag']) {
      b1.children[1] = call(\`sub\`, ctx);
    }
    return b1;
  }
}"
`;

exports[`t-call (template calling) t-esc inside t-call, with t-set outside 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div><owl-anchor></owl-anchor></div>\`);
    children = new Array(1);
  }
  
  return ctx => {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    ctx[\`v\`] = \`Hi\`;
    b1.children[0] = call(\`sub\`, ctx);
    return b1;
  }
}"
`;

exports[`t-esc div with falsy values 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div><p><owl-text></owl-text></p><p><owl-text></owl-text></p><p><owl-text></owl-text></p><p><owl-text></owl-text></p><p><owl-text></owl-text></p></div>\`);
    texts = new Array(5);
    update() {
      this.el.firstChild.firstChild.textContent = toString(this.texts[0]);
      this.el.firstChild.nextSibling.firstChild.textContent = toString(this.texts[1]);
      this.el.firstChild.nextSibling.nextSibling.firstChild.textContent = toString(this.texts[2]);
      this.el.firstChild.nextSibling.nextSibling.nextSibling.firstChild.textContent = toString(this.texts[3]);
      this.el.firstChild.nextSibling.nextSibling.nextSibling.nextSibling.firstChild.textContent = toString(this.texts[4]);
    }
  }
  
  return ctx => {
    const b1 = new Block1();
    b1.texts[0] = ctx['v1'];
    b1.texts[1] = ctx['v2'];
    b1.texts[2] = ctx['v3'];
    b1.texts[3] = ctx['v4'];
    b1.texts[4] = ctx['v5'];
    return b1;
  }
}"
`;

exports[`t-esc escaping 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<span><owl-text></owl-text></span>\`);
    texts = new Array(1);
    update() {
      this.el.firstChild.textContent = toString(this.texts[0]);
    }
  }
  
  return ctx => {
    const b1 = new Block1();
    b1.texts[0] = ctx['var'];
    return b1;
  }
}"
`;

exports[`t-esc escaping on a node 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<span><owl-text></owl-text></span>\`);
    texts = new Array(1);
    update() {
      this.el.firstChild.textContent = toString(this.texts[0]);
    }
  }
  
  return ctx => {
    const b1 = new Block1();
    b1.texts[0] = 'ok';
    return b1;
  }
}"
`;

exports[`t-esc escaping on a node with a body 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<span><owl-text></owl-text></span>\`);
    texts = new Array(1);
    update() {
      this.el.firstChild.textContent = toString(this.texts[0]);
    }
  }
  
  return ctx => {
    const b1 = new Block1();
    b1.texts[0] = withDefault('ok', \`nope\`);
    return b1;
  }
}"
`;

exports[`t-esc escaping on a node with a body, as a default 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<span><owl-text></owl-text></span>\`);
    texts = new Array(1);
    update() {
      this.el.firstChild.textContent = toString(this.texts[0]);
    }
  }
  
  return ctx => {
    const b1 = new Block1();
    b1.texts[0] = withDefault(ctx['var'], \`nope\`);
    return b1;
  }
}"
`;

exports[`t-esc literal 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<span><owl-text></owl-text></span>\`);
    texts = new Array(1);
    update() {
      this.el.firstChild.textContent = toString(this.texts[0]);
    }
  }
  
  return ctx => {
    const b1 = new Block1();
    b1.texts[0] = 'ok';
    return b1;
  }
}"
`;

exports[`t-esc t-esc work with spread operator 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<span><owl-text></owl-text></span>\`);
    texts = new Array(1);
    update() {
      this.el.firstChild.textContent = toString(this.texts[0]);
    }
  }
  
  return ctx => {
    const b1 = new Block1();
    b1.texts[0] = [...ctx['state'].list];
    return b1;
  }
}"
`;

exports[`t-esc variable 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<span><owl-text></owl-text></span>\`);
    texts = new Array(1);
    update() {
      this.el.firstChild.textContent = toString(this.texts[0]);
    }
  }
  
  return ctx => {
    const b1 = new Block1();
    b1.texts[0] = ctx['var'];
    return b1;
  }
}"
`;

exports[`t-if a t-if next to a div 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div>foo</div>\`);
  }
  class Block2 extends ContentBlock {
    static el = elem(\`1\`);
  }
  
  return ctx => {
    const b1 = new MultiBlock(2);
    const b2 = b1.children[0] = new Block1();
    if (ctx['cond']) {
      const b3 = b1.children[1] = new Block2();
    }
    return b1;
  }
}"
`;

exports[`t-if a t-if with two inner nodes 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<span>yip</span>\`);
  }
  class Block2 extends ContentBlock {
    static el = elem(\`<div>yip</div>\`);
  }
  
  return ctx => {
    const b1 = new MultiBlock(1);
    if (ctx['condition']) {
      const b2 = b1.children[0] = new MultiBlock(2);
      const b3 = b2.children[0] = new Block1();
      const b4 = b2.children[1] = new Block2();
    }
    return b1;
  }
}"
`;

exports[`t-if div containing a t-if with two inner nodes 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div><owl-anchor></owl-anchor></div>\`);
    children = new Array(1);
  }
  class Block2 extends ContentBlock {
    static el = elem(\`<span>yip</span>\`);
  }
  class Block3 extends ContentBlock {
    static el = elem(\`<div>yip</div>\`);
  }
  
  return ctx => {
    const b1 = new Block1();
    if (ctx['condition']) {
      const b2 = b1.children[0] = new MultiBlock(2);
      const b3 = b2.children[0] = new Block2();
      const b4 = b2.children[1] = new Block3();
    }
    return b1;
  }
}"
`;

exports[`t-if dynamic content after t-if with two children nodes 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div><owl-anchor></owl-anchor><owl-text></owl-text></div>\`);
    children = new Array(1);
    texts = new Array(1);
    update() {
      this.anchors[0].nextSibling.textContent = toString(this.texts[0]);
    }
  }
  class Block2 extends ContentBlock {
    static el = elem(\`<p>1</p>\`);
  }
  class Block3 extends ContentBlock {
    static el = elem(\`<p>2</p>\`);
  }
  
  return ctx => {
    const b1 = new Block1();
    if (ctx['condition']) {
      const b2 = b1.children[0] = new MultiBlock(2);
      const b3 = b2.children[0] = new Block2();
      const b4 = b2.children[1] = new Block3();
    }
    b1.texts[0] = ctx['text'];
    return b1;
  }
}"
`;

exports[`t-if just a t-if 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`ok\`);
  }
  
  return ctx => {
    const b1 = new MultiBlock(1);
    if (ctx['condition']) {
      const b2 = b1.children[0] = new Block1();
    }
    return b1;
  }
}"
`;

exports[`t-if simple t-if/t-else 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`1\`);
  }
  class Block2 extends ContentBlock {
    static el = elem(\`2\`);
  }
  
  return ctx => {
    const b1 = new MultiBlock(2);
    if (ctx['condition']) {
      const b2 = b1.children[0] = new Block1();
    } else {
      const b3 = b1.children[1] = new Block2();
    }
    return b1;
  }
}"
`;

exports[`t-if simple t-if/t-else in a div 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div><owl-anchor></owl-anchor><owl-anchor></owl-anchor></div>\`);
    children = new Array(2);
  }
  class Block2 extends ContentBlock {
    static el = elem(\`1\`);
  }
  class Block3 extends ContentBlock {
    static el = elem(\`2\`);
  }
  
  return ctx => {
    const b1 = new Block1();
    if (ctx['condition']) {
      const b2 = b1.children[0] = new Block2();
    } else {
      const b3 = b1.children[1] = new Block3();
    }
    return b1;
  }
}"
`;

exports[`t-if t-if and t-else with two nodes 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`1\`);
  }
  class Block2 extends ContentBlock {
    static el = elem(\`<span>a</span>\`);
  }
  class Block3 extends ContentBlock {
    static el = elem(\`<span>b</span>\`);
  }
  
  return ctx => {
    const b1 = new MultiBlock(2);
    if (ctx['condition']) {
      const b2 = b1.children[0] = new Block1();
    } else {
      const b3 = b1.children[1] = new MultiBlock(2);
      const b4 = b3.children[0] = new Block2();
      const b5 = b3.children[1] = new Block3();
    }
    return b1;
  }
}"
`;

exports[`t-if t-if in a div 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div><owl-anchor></owl-anchor></div>\`);
    children = new Array(1);
  }
  class Block2 extends ContentBlock {
    static el = elem(\`ok\`);
  }
  
  return ctx => {
    const b1 = new Block1();
    if (ctx['condition']) {
      const b2 = b1.children[0] = new Block2();
    }
    return b1;
  }
}"
`;

exports[`t-if t-if in a t-if 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div><owl-anchor></owl-anchor></div>\`);
    children = new Array(1);
  }
  class Block2 extends ContentBlock {
    static el = elem(\`<span>1<owl-anchor></owl-anchor></span>\`);
    children = new Array(1);
  }
  class Block3 extends ContentBlock {
    static el = elem(\`2\`);
  }
  
  return ctx => {
    const b1 = new Block1();
    if (ctx['cond1']) {
      const b2 = b1.children[0] = new Block2();
      if (ctx['cond2']) {
        const b3 = b2.children[0] = new Block3();
      }
    }
    return b1;
  }
}"
`;

exports[`t-if two consecutive t-if 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`1\`);
  }
  class Block2 extends ContentBlock {
    static el = elem(\`2\`);
  }
  
  return ctx => {
    const b1 = new MultiBlock(2);
    if (ctx['cond1']) {
      const b2 = b1.children[0] = new Block1();
    }
    if (ctx['cond2']) {
      const b3 = b1.children[1] = new Block2();
    }
    return b1;
  }
}"
`;

exports[`t-if two consecutive t-if in a div 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div><owl-anchor></owl-anchor><owl-anchor></owl-anchor></div>\`);
    children = new Array(2);
  }
  class Block2 extends ContentBlock {
    static el = elem(\`1\`);
  }
  class Block3 extends ContentBlock {
    static el = elem(\`2\`);
  }
  
  return ctx => {
    const b1 = new Block1();
    if (ctx['cond1']) {
      const b2 = b1.children[0] = new Block2();
    }
    if (ctx['cond2']) {
      const b3 = b1.children[1] = new Block3();
    }
    return b1;
  }
}"
`;

exports[`t-raw literal 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<span><owl-anchor></owl-anchor></span>\`);
    children = new Array(1);
  }
  
  return ctx => {
    const b1 = new Block1();
    b1.children[0] = new HTMLBlock('ok');
    return b1;
  }
}"
`;

exports[`t-raw literal, no outside html element 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  
  return ctx => {
    const b1 = new MultiBlock(1);
    b1.children[0] = new HTMLBlock('ok');
    return b1;
  }
}"
`;

exports[`t-raw not escaping 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div><owl-anchor></owl-anchor></div>\`);
    children = new Array(1);
  }
  
  return ctx => {
    const b1 = new Block1();
    b1.children[0] = new HTMLBlock(ctx['var']);
    return b1;
  }
}"
`;

exports[`t-raw t-raw and another sibling node 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<span><span>hello</span><owl-anchor></owl-anchor></span>\`);
    children = new Array(1);
  }
  
  return ctx => {
    const b1 = new Block1();
    b1.children[0] = new HTMLBlock(ctx['var']);
    return b1;
  }
}"
`;

exports[`t-raw variable 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<span><owl-anchor></owl-anchor></span>\`);
    children = new Array(1);
  }
  
  return ctx => {
    const b1 = new Block1();
    b1.children[0] = new HTMLBlock(ctx['var']);
    return b1;
  }
}"
`;

exports[`t-set evaluate value expression 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div><owl-text></owl-text></div>\`);
    texts = new Array(1);
    update() {
      this.el.firstChild.textContent = toString(this.texts[0]);
    }
  }
  
  return ctx => {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    ctx[\`value\`] = 1+2;
    b1.texts[0] = ctx['value'];
    return b1;
  }
}"
`;

exports[`t-set evaluate value expression, part 2 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div><owl-text></owl-text></div>\`);
    texts = new Array(1);
    update() {
      this.el.firstChild.textContent = toString(this.texts[0]);
    }
  }
  
  return ctx => {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    ctx[\`value\`] = ctx['somevariable']+2;
    b1.texts[0] = ctx['value'];
    return b1;
  }
}"
`;

exports[`t-set set from attribute literal (no outside div) 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<owl-text></owl-text>\`);
    texts = new Array(1);
    update() {
      this.el.textContent = toString(this.texts[0]);
    }
  }
  
  return ctx => {
    ctx = Object.create(ctx);
    ctx[\`value\`] = 'ok';
    const b1 = new Block1();
    b1.texts[0] = ctx['value'];
    return b1;
  }
}"
`;

exports[`t-set set from attribute literal 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div><owl-text></owl-text></div>\`);
    texts = new Array(1);
    update() {
      this.el.firstChild.textContent = toString(this.texts[0]);
    }
  }
  
  return ctx => {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    ctx[\`value\`] = 'ok';
    b1.texts[0] = ctx['value'];
    return b1;
  }
}"
`;

exports[`t-set set from attribute lookup 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div><owl-text></owl-text></div>\`);
    texts = new Array(1);
    update() {
      this.el.firstChild.textContent = toString(this.texts[0]);
    }
  }
  
  return ctx => {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    ctx[\`stuff\`] = ctx['value'];
    b1.texts[0] = ctx['stuff'];
    return b1;
  }
}"
`;

exports[`t-set set from body literal 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<owl-text></owl-text>\`);
    texts = new Array(1);
    update() {
      this.el.textContent = toString(this.texts[0]);
    }
  }
  
  return ctx => {
    ctx = Object.create(ctx);
    ctx[\`value\`] = \`ok\`;
    const b1 = new Block1();
    b1.texts[0] = ctx['value'];
    return b1;
  }
}"
`;

exports[`t-set set from body lookup 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div><owl-text></owl-text></div>\`);
    texts = new Array(1);
    update() {
      this.el.firstChild.textContent = toString(this.texts[0]);
    }
  }
  class Block2 extends ContentBlock {
    static el = elem(\`<owl-text></owl-text>\`);
    texts = new Array(1);
    update() {
      this.el.textContent = toString(this.texts[0]);
    }
  }
  
  return ctx => {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    const b2 = new Block2();
    b2.texts[0] = ctx['value'];
    ctx[\`stuff\`] = b2;
    b1.texts[0] = ctx['stuff'];
    return b1;
  }
}"
`;

exports[`t-set set from empty body 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div><owl-text></owl-text></div>\`);
    texts = new Array(1);
    update() {
      this.el.firstChild.textContent = toString(this.texts[0]);
    }
  }
  
  return ctx => {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    ctx[\`stuff\`] = null;
    b1.texts[0] = ctx['stuff'];
    return b1;
  }
}"
`;

exports[`t-set t-set and t-if 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div><owl-anchor></owl-anchor></div>\`);
    children = new Array(1);
  }
  class Block2 extends ContentBlock {
    static el = elem(\`grimbergen\`);
  }
  
  return ctx => {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    ctx[\`v\`] = ctx['value'];
    if (ctx['v']==='ok') {
      const b2 = b1.children[0] = new Block2();
    }
    return b1;
  }
}"
`;

exports[`t-set t-set body is evaluated immediately 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div><owl-anchor></owl-anchor></div>\`);
    children = new Array(1);
  }
  class Block2 extends ContentBlock {
    static el = elem(\`<span><owl-text></owl-text></span>\`);
    texts = new Array(1);
    update() {
      this.el.firstChild.textContent = toString(this.texts[0]);
    }
  }
  
  return ctx => {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    ctx[\`v1\`] = 'before';
    const b2 = new Block2();
    b2.texts[0] = ctx['v1'];
    ctx[\`v2\`] = b2;
    ctx[\`v1\`] = 'after';
    b1.children[0] = new HTMLBlock(ctx['v2']);
    return b1;
  }
}"
`;

exports[`t-set t-set evaluates an expression only once 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div><owl-text></owl-text><owl-text></owl-text></div>\`);
    texts = new Array(2);
    update() {
      this.el.firstChild.textContent = toString(this.texts[0]);
      this.el.firstChild.nextSibling.textContent = toString(this.texts[1]);
    }
  }
  
  return ctx => {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    ctx[\`v\`] = ctx['value']+' artois';
    b1.texts[0] = ctx['v'];
    b1.texts[1] = ctx['v'];
    return b1;
  }
}"
`;

exports[`t-set t-set with content and sub t-esc 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div><owl-text></owl-text></div>\`);
    texts = new Array(1);
    update() {
      this.el.firstChild.textContent = toString(this.texts[0]);
    }
  }
  class Block2 extends ContentBlock {
    static el = elem(\`<owl-text></owl-text>\`);
    texts = new Array(1);
    update() {
      this.el.textContent = toString(this.texts[0]);
    }
  }
  class Block3 extends ContentBlock {
    static el = elem(\` boop\`);
  }
  
  return ctx => {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    const b2 = new MultiBlock(2);
    const b3 = b2.children[0] = new Block2();
    b3.texts[0] = ctx['beep'];
    const b4 = b2.children[1] = new Block3();
    ctx[\`setvar\`] = b2;
    b1.texts[0] = ctx['setvar'];
    return b1;
  }
}"
`;

exports[`t-set t-set with t-value (falsy) and body 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div><owl-anchor></owl-anchor></div>\`);
    children = new Array(1);
  }
  class Block2 extends ContentBlock {
    static el = elem(\`<span><owl-text></owl-text></span>\`);
    texts = new Array(1);
    update() {
      this.el.firstChild.textContent = toString(this.texts[0]);
    }
  }
  
  return ctx => {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    ctx[\`v3\`] = false;
    ctx[\`v1\`] = 'before';
    const b2 = new Block2();
    b2.texts[0] = ctx['v1'];
    ctx[\`v2\`] = withDefault(ctx['v3'], b2);
    ctx[\`v1\`] = 'after';
    ctx[\`v3\`] = true;
    b1.children[0] = new HTMLBlock(ctx['v2']);
    return b1;
  }
}"
`;

exports[`t-set t-set with t-value (truthy) and body 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div><owl-anchor></owl-anchor></div>\`);
    children = new Array(1);
  }
  class Block2 extends ContentBlock {
    static el = elem(\`<span><owl-text></owl-text></span>\`);
    texts = new Array(1);
    update() {
      this.el.firstChild.textContent = toString(this.texts[0]);
    }
  }
  
  return ctx => {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    ctx[\`v3\`] = 'Truthy';
    ctx[\`v1\`] = 'before';
    const b2 = new Block2();
    b2.texts[0] = ctx['v1'];
    ctx[\`v2\`] = withDefault(ctx['v3'], b2);
    ctx[\`v1\`] = 'after';
    ctx[\`v3\`] = false;
    b1.children[0] = new HTMLBlock(ctx['v2']);
    return b1;
  }
}"
`;

exports[`t-set t-set, t-if, and mix of expression/body lookup, 1 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div><owl-anchor></owl-anchor><owl-anchor></owl-anchor><owl-text></owl-text></div>\`);
    children = new Array(2);
    texts = new Array(1);
    update() {
      this.anchors[0].nextSibling.textContent = toString(this.texts[0]);
    }
  }
  
  return ctx => {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    if (ctx['flag']) {
      ctx[\`ourvar\`] = \`1\`;
    } else {
      ctx[\`ourvar\`] = 0;
    }
    b1.texts[0] = ctx['ourvar'];
    return b1;
  }
}"
`;

exports[`t-set t-set, t-if, and mix of expression/body lookup, 2 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div><owl-anchor></owl-anchor><owl-anchor></owl-anchor><owl-text></owl-text></div>\`);
    children = new Array(2);
    texts = new Array(1);
    update() {
      this.anchors[0].nextSibling.textContent = toString(this.texts[0]);
    }
  }
  
  return ctx => {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    if (ctx['flag']) {
      ctx[\`ourvar\`] = 1;
    } else {
      ctx[\`ourvar\`] = \`0\`;
    }
    b1.texts[0] = ctx['ourvar'];
    return b1;
  }
}"
`;

exports[`t-set t-set, t-if, and mix of expression/body lookup, 3 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<owl-text></owl-text>\`);
    texts = new Array(1);
    update() {
      this.el.textContent = toString(this.texts[0]);
    }
  }
  
  return ctx => {
    ctx = Object.create(ctx);
    const b1 = new MultiBlock(2);
    if (ctx['flag']) {
      ctx[\`ourvar\`] = 1;
    } else {
      ctx[\`ourvar\`] = \`0\`;
    }
    const b2 = b1.children[1] = new Block1();
    b2.texts[0] = ctx['ourvar'];
    return b1;
  }
}"
`;

exports[`t-set value priority (with non text body 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div><owl-text></owl-text></div>\`);
    texts = new Array(1);
    update() {
      this.el.firstChild.textContent = toString(this.texts[0]);
    }
  }
  class Block2 extends ContentBlock {
    static el = elem(\`<span>2</span>\`);
  }
  
  return ctx => {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    const b2 = new Block2();
    ctx[\`value\`] = withDefault(1, b2);
    b1.texts[0] = ctx['value'];
    return b1;
  }
}"
`;

exports[`t-set value priority 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div><owl-text></owl-text></div>\`);
    texts = new Array(1);
    update() {
      this.el.firstChild.textContent = toString(this.texts[0]);
    }
  }
  
  return ctx => {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    ctx[\`value\`] = withDefault(1, \`2\`);
    b1.texts[0] = ctx['value'];
    return b1;
  }
}"
`;

exports[`white space handling consecutives whitespaces are condensed into a single space 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div> abc </div>\`);
  }
  
  return ctx => {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`white space handling nothing is done in pre tags 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<pre>

        some text
      </pre>\`);
  }
  
  return ctx => {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`white space handling white space only text nodes are condensed into a single space 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div> </div>\`);
  }
  
  return ctx => {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`white space handling whitespace only text nodes with newlines are removed 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, ContentBlock, HTMLBlock} = Blocks;
  let {elem, toString, withDefault, call} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div><span>abc</span></div>\`);
  }
  
  return ctx => {
    const b1 = new Block1();
    return b1;
  }
}"
`;
