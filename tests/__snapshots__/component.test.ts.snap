// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`basics Multi root component 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, TextBlock, ContentBlock, CollectionBlock, HTMLBlock, ComponentBlock} = Blocks;
  let {elem, toString, withDefault, call, zero, scope, getValues, owner} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<span>1</span>\`);
  }
  class Block2 extends ContentBlock {
    static el = elem(\`<span>2</span>\`);
  }
  
  return ctx => {
    const b1 = new MultiBlock(3);
    const b2 = b1.children[0] = new Block1();
    b1.children[1] = new TextBlock(\`text\`)
    const b3 = b1.children[2] = new Block2();
    return b1;
  }
}"
`;

exports[`basics a class component inside a class component 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, TextBlock, ContentBlock, CollectionBlock, HTMLBlock, ComponentBlock} = Blocks;
  let {elem, toString, withDefault, call, zero, scope, getValues, owner} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<span><owl-anchor/></span>\`);
    children = new Array(1);
  }
  
  return ctx => {
    const b1 = new Block1();
    b1.children[0] = new ComponentBlock(ctx, \`Child\`, {})
    return b1;
  }
}"
`;

exports[`basics a class component inside a class component, no external dom 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, TextBlock, ContentBlock, CollectionBlock, HTMLBlock, ComponentBlock} = Blocks;
  let {elem, toString, withDefault, call, zero, scope, getValues, owner} = utils;
  
  
  return ctx => {
    const b1 = new ComponentBlock(ctx, \`Child\`, {})
    return b1;
  }
}"
`;

exports[`basics a functional component inside a class component 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, TextBlock, ContentBlock, CollectionBlock, HTMLBlock, ComponentBlock} = Blocks;
  let {elem, toString, withDefault, call, zero, scope, getValues, owner} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<span><owl-anchor/></span>\`);
    children = new Array(1);
  }
  
  return ctx => {
    const b1 = new Block1();
    b1.children[0] = new ComponentBlock(ctx, \`Child\`, {})
    return b1;
  }
}"
`;

exports[`basics a functional component inside a functional component 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, TextBlock, ContentBlock, CollectionBlock, HTMLBlock, ComponentBlock} = Blocks;
  let {elem, toString, withDefault, call, zero, scope, getValues, owner} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<span><owl-anchor/></span>\`);
    children = new Array(1);
  }
  
  return ctx => {
    const b1 = new Block1();
    b1.children[0] = new ComponentBlock(ctx, \`Child\`, {})
    return b1;
  }
}"
`;

exports[`basics can mount a simple class component 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, TextBlock, ContentBlock, CollectionBlock, HTMLBlock, ComponentBlock} = Blocks;
  let {elem, toString, withDefault, call, zero, scope, getValues, owner} = utils;
  
  
  return ctx => {
    const b1 = new TextBlock(\`__template__1\`)
    return b1;
  }
}"
`;

exports[`basics can mount a simple class component 2`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, TextBlock, ContentBlock, CollectionBlock, HTMLBlock, ComponentBlock} = Blocks;
  let {elem, toString, withDefault, call, zero, scope, getValues, owner} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<span>simple vnode</span>\`);
  }
  
  return ctx => {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`basics class component with dynamic text 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, TextBlock, ContentBlock, CollectionBlock, HTMLBlock, ComponentBlock} = Blocks;
  let {elem, toString, withDefault, call, zero, scope, getValues, owner} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<span>My value: <owl-text/></span>\`);
    data = new Array(1);
    update() {
      this.el.firstChild.nextSibling.textContent = toString(this.data[0]);
    }
  }
  
  return ctx => {
    const b1 = new Block1();
    b1.data[0] = ctx['value'];
    return b1;
  }
}"
`;

exports[`basics class parent, class child component with props 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, TextBlock, ContentBlock, CollectionBlock, HTMLBlock, ComponentBlock} = Blocks;
  let {elem, toString, withDefault, call, zero, scope, getValues, owner} = utils;
  
  
  return ctx => {
    const b1 = new ComponentBlock(ctx, \`Child\`, {value: 42})
    return b1;
  }
}"
`;

exports[`basics class parent, class child component with props 2`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, TextBlock, ContentBlock, CollectionBlock, HTMLBlock, ComponentBlock} = Blocks;
  let {elem, toString, withDefault, call, zero, scope, getValues, owner} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<div><owl-text/></div>\`);
    data = new Array(1);
    update() {
      this.el.firstChild.textContent = toString(this.data[0]);
    }
  }
  
  return ctx => {
    const b1 = new Block1();
    b1.data[0] = ctx['props'].value;
    return b1;
  }
}"
`;

exports[`basics functional component: setup return value is context 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, TextBlock, ContentBlock, CollectionBlock, HTMLBlock, ComponentBlock} = Blocks;
  let {elem, toString, withDefault, call, zero, scope, getValues, owner} = utils;
  
  class Block1 extends ContentBlock {
    static el = elem(\`<span>My value: <owl-text/></span>\`);
    data = new Array(1);
    update() {
      this.el.firstChild.nextSibling.textContent = toString(this.data[0]);
    }
  }
  
  return ctx => {
    const b1 = new Block1();
    b1.data[0] = ctx['value'];
    return b1;
  }
}"
`;

exports[`basics parent, child and grandchild 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, TextBlock, ContentBlock, CollectionBlock, HTMLBlock, ComponentBlock} = Blocks;
  let {elem, toString, withDefault, call, zero, scope, getValues, owner} = utils;
  
  
  return ctx => {
    const b1 = new ComponentBlock(ctx, \`Child\`, {})
    return b1;
  }
}"
`;

exports[`basics simple functional component with text node 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, TextBlock, ContentBlock, CollectionBlock, HTMLBlock, ComponentBlock} = Blocks;
  let {elem, toString, withDefault, call, zero, scope, getValues, owner} = utils;
  
  
  return ctx => {
    const b1 = new TextBlock(\`look, just text!\`)
    return b1;
  }
}"
`;

exports[`basics two child components 1`] = `
"function anonymous(Blocks, utils
) {
  let {MultiBlock, TextBlock, ContentBlock, CollectionBlock, HTMLBlock, ComponentBlock} = Blocks;
  let {elem, toString, withDefault, call, zero, scope, getValues, owner} = utils;
  
  
  return ctx => {
    const b1 = new MultiBlock(2);
    b1.children[0] = new ComponentBlock(ctx, \`Child\`, {})
    b1.children[1] = new ComponentBlock(ctx, \`Child\`, {})
    return b1;
  }
}"
`;
