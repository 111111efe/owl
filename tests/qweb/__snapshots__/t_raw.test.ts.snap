// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`t-raw literal 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BHtml, BMulti, BNode, BText} = Blocks;
  let {elem, toString, withDefault, call, zero, scope, getValues, owner, callSlot} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<span><owl-anchor/></span>\`);
    children = new Array(1);
  }
  
  return ctx => {
    const b1 = new Block1();
    b1.children[0] = new BHtml('ok');
    return b1;
  }
}"
`;

exports[`t-raw literal, no outside html element 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BHtml, BMulti, BNode, BText} = Blocks;
  let {elem, toString, withDefault, call, zero, scope, getValues, owner, callSlot} = utils;
  
  return ctx => {
    const b1 = new BMulti(1);
    b1.children[0] = new BHtml('ok');
    return b1;
  }
}"
`;

exports[`t-raw not escaping 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BHtml, BMulti, BNode, BText} = Blocks;
  let {elem, toString, withDefault, call, zero, scope, getValues, owner, callSlot} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><owl-anchor/></div>\`);
    children = new Array(1);
  }
  
  return ctx => {
    const b1 = new Block1();
    b1.children[0] = new BHtml(ctx['var']);
    return b1;
  }
}"
`;

exports[`t-raw t-raw and another sibling node 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BHtml, BMulti, BNode, BText} = Blocks;
  let {elem, toString, withDefault, call, zero, scope, getValues, owner, callSlot} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<span><span>hello</span><owl-anchor/></span>\`);
    children = new Array(1);
  }
  
  return ctx => {
    const b1 = new Block1();
    b1.children[0] = new BHtml(ctx['var']);
    return b1;
  }
}"
`;

exports[`t-raw t-raw on a node with a body, as a default 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BHtml, BMulti, BNode, BText} = Blocks;
  let {elem, toString, withDefault, call, zero, scope, getValues, owner, callSlot} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<span><owl-anchor/></span>\`);
    children = new Array(1);
  }
  
  return ctx => {
    const b1 = new Block1();
    const b2 = new BText(\`nope\`);
    b1.children[0] = new BHtml(withDefault(ctx['var'], b2));
    return b1;
  }
}"
`;

exports[`t-raw t-raw on a node with a dom node in body, as a default 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BHtml, BMulti, BNode, BText} = Blocks;
  let {elem, toString, withDefault, call, zero, scope, getValues, owner, callSlot} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<span><owl-anchor/></span>\`);
    children = new Array(1);
  }
  
  class Block2 extends BNode {
    static el = elem(\`<div>nope</div>\`);
  }
  
  return ctx => {
    const b1 = new Block1();
    const b2 = new Block2();
    b1.children[0] = new BHtml(withDefault(ctx['var'], b2));
    return b1;
  }
}"
`;

exports[`t-raw variable 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BHtml, BMulti, BNode, BText} = Blocks;
  let {elem, toString, withDefault, call, zero, scope, getValues, owner, callSlot} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<span><owl-anchor/></span>\`);
    children = new Array(1);
  }
  
  return ctx => {
    const b1 = new Block1();
    b1.children[0] = new BHtml(ctx['var']);
    return b1;
  }
}"
`;
